<?xml version="1.0" encoding="UTF-8" standalone="no"?><templates><template autoinsert="true" context="phpcomment" deleted="false" description="add the user as author" enabled="true" id="org.eclipse.php.ui.editor.templates.phpdoc.author" name="author">@author ${user}
</template><template autoinsert="false" context="php" deleted="false" description="class statement" enabled="true" id="org.eclipse.php.ui.editor.templates.php.class" name="class">class ${class_name} {
	function ${function_name}() {
		${cursor};
	}
}
</template><template autoinsert="false" context="php" deleted="false" description="Clone an object" enabled="true" id="org.eclipse.php.ui.editor.templates.php.cln" name="cln">${dollar}${new_obj} = clone ${dollar}${variable};
${cursor}</template><template autoinsert="false" context="php" deleted="false" description="lambda function statement (closure)" enabled="true" id="org.eclipse.php.ui.editor.templates.php.closure" name="closure">function (${parameters}) use (${lexical_variables}) {
	${cursor};
}
</template><template autoinsert="false" context="php" deleted="false" description="class statement" enabled="true" id="org.eclipse.php.ui.editor.templates.php.cls" name="cls">class ${class_name} {
	function ${function_name}() {
		${cursor};
	}
}
</template><template autoinsert="false" context="php" deleted="false" description="echo a string" enabled="true" id="org.eclipse.php.ui.editor.templates.php.echo" name="eco">echo("${}");
${cursor}</template><template autoinsert="true" context="php" deleted="false" description="" enabled="true" name="EL">error_reporting(E_ALL);</template><template autoinsert="false" context="php" deleted="false" description="elseif statement" enabled="true" id="org.eclipse.php.ui.editor.templates.php.elif" name="elif">elseif (${condition}) {
	${cursor};
}
</template><template autoinsert="false" context="php" deleted="false" description="else statement" enabled="true" id="org.eclipse.php.ui.editor.templates.php.else" name="els">else {
	${cursor};
}
</template><template autoinsert="false" context="php" deleted="false" description="function statement" enabled="true" id="org.eclipse.php.ui.editor.templates.php.fnc" name="fnc">function ${function_name}(${dollar}${param}) {
	${cursor};
}
</template><template autoinsert="false" context="php" deleted="false" description="for statement" enabled="true" id="org.eclipse.php.ui.editor.templates.php.for" name="for">for (${dollar}${index} = 0; ${dollar}${index} &lt; ${number_variable}; ${dollar}${index}++) {
	${line_selection}${cursor}
}</template><template autoinsert="false" context="php" deleted="false" description="foreach statement" enabled="true" id="org.eclipse.php.ui.editor.templates.php.foreach" name="fore">foreach (${dollar}${array_expression} as ${dollar}${value}) {
	${cursor};
}
</template><template autoinsert="false" context="php" deleted="false" description="foreach with key statement" enabled="true" id="org.eclipse.php.ui.editor.templates.php.foreachkey" name="forek">foreach (${dollar}${array_expression} as ${dollar}${key} =&gt; ${dollar}${value}) {
	${cursor};
}
</template><template autoinsert="false" context="php" deleted="false" description="function statement" enabled="true" id="org.eclipse.php.ui.editor.templates.php.function" name="function">function ${function_name}(${dollar}${param}) {
	${cursor};
}
</template><template autoinsert="true" context="php" deleted="false" description="Getter Body" enabled="true" id="org.eclipse.php.ui.editor.templates.php.codetemplates.getterbody" name="getterbody">return ${field};</template><template autoinsert="true" context="php" deleted="false" description="Work with i5/OS active jobs" enabled="true" id="com.zend.php.ui.editor.templates.php.i5.i5ActiveJobs" name="i5ActiveJobs">/*&#13;
This template allows to retrieve  i5/OS active jobs entries&#13;
&#13;
1. Conects to i5 server&#13;
2. Opens active job list&#13;
3. Gets array for an acive job entry &#13;
4. Closes handle received from i5_job_list function&#13;
5. Closes connection to i5 server&#13;
&#13;
If you want to use additional connection options, remove comments in the array block&#13;
*/&#13;
&#13;
// Set connection parameters&#13;
$$connection_parameters = array(&#13;
//	I5_OPTIONS_JOBNAME 		    =&gt; '${job_name}',	       // Define machine name by default&#13;
//	I5_OPTIONS_SQLNAMING 	    =&gt; '${sql_naming}',	       // To use dotted (.) or slashed (/) notation in SQL requests&#13;
//	I5_OPTIONS_DECIMALPOINT =&gt; '${decimal_point}',    // To use dot or comma as decimal separator&#13;
//	I5_OPTIONS_CODEPAGEFILE =&gt; '${code_page_file}', // To use a specific code page&#13;
//	I5_OPTIONS_ALIAS		        =&gt; '${alias}',		           // Enables naming a connection&#13;
//	I5_OPTIONS_INITLIBL		    =&gt; '${init_libl}'	           // Specifies initial library&#13;
);&#13;
&#13;
$$conn = i5_connect('127.0.0.1', '${user_name}', '${password}', $$connection_parameters);&#13;
&#13;
if (is_resource($$conn)) {&#13;
&#13;
    $$elements = array(&#13;
    // JOBNAME      =&gt; '${job_name}', &#13;
    // JOBUSER      =&gt; '${job_user}',&#13;
    // JOBNUMBER =&gt; '${job_number}',&#13;
    // JOBTYPE       =&gt; '${job_type}',&#13;
    // DIRECTION   =&gt; '${direction}' //(default is current job)  &#13;
    );&#13;
&#13;
    //connection - result of i5_connect  &#13;
&#13;
    $$jobs = i5_job_list($$elements);&#13;
&#13;
    if (is_resource($$jobs)) { &#13;
    	// Use i5_job_list_read function to retrieve the job entries from this handle&#13;
	    $$job_read = i5_job_list_read($$jobs);&#13;
&#13;
	    if (is_array($$job_read)) {     	    	&#13;
	    	// $$job_read variable contains array of active job entries	&#13;
	        ${cursor} // INSERT YOUR CODE HERE !!!&#13;
	    } &#13;
	    &#13;
	    else {&#13;
        	// Failed to get array for an active job entry, need to close the job list and the i5 connection     &#13;
        }&#13;
    } &#13;
    &#13;
    else {     &#13;
    	// Failed to open active job list, use i5_errormsg() to get the failure reason and close the connection to i5 server &#13;
    }&#13;
&#13;
    if (!i5_job_list_close($$jobs)) {&#13;
        // Failed to close handle received from i5_job_list(), use i5_errormsg() to get the failure reason and close the connection to i5 server&#13;
    }&#13;
    &#13;
    if (!i5_close($$conn)) {&#13;
        // Failed to disconnect from i5 server, use i5_errormsg() to get the failure reason&#13;
    }&#13;
} &#13;
&#13;
else {&#13;
	// Connection to i5 server failed, use i5_errormsg() to get the failure reason&#13;
}</template><template autoinsert="true" context="php" deleted="false" description="Connect to i5/OS server" enabled="true" id="com.zend.php.ui.editor.templates.php.i5.i5Connect" name="i5Connect">/*&#13;
This template allows to connect to i5/OS server&#13;
&#13;
1. Conects to i5 server&#13;
2. Closes connection to i5 server&#13;
&#13;
If you want to use additional connection options, remove comments in the array block&#13;
*/&#13;
&#13;
// Set connection parameters&#13;
$$connection_parameters = array(&#13;
//	I5_OPTIONS_JOBNAME  	=&gt;     '${job_name}',	       // Define machine name by default&#13;
//	I5_OPTIONS_SQLNAMING 	=&gt;     '${sql_naming}',        // To use dotted (.) or slashed (/) notation in SQL requests&#13;
//	I5_OPTIONS_DECIMALPOINT =&gt; '${decimal_point}',    // To use dot or comma as decimal separator&#13;
//	I5_OPTIONS_CODEPAGEFILE =&gt; '${code_page_file}', // To use a specific code page&#13;
//	I5_OPTIONS_ALIAS	=&gt;             '${alias}',	               // Enables naming a connection&#13;
//	I5_OPTIONS_INITLIBL	=&gt;         '${init_libl}'                 // Specifies initial library&#13;
);&#13;
&#13;
$$conn = i5_connect('127.0.0.1', '${user_name}', '${password}', $$connection_parameters);&#13;
&#13;
if (is_resource($$conn)) {&#13;
    ${cursor}// ENTER YOUR CODE HERE!&#13;
    &#13;
    if (!i5_close($$conn)) {&#13;
        // Failed to disconnect from i5 server, use i5_errormsg() to get the failure reason&#13;
    }  &#13;
}&#13;
    &#13;
else {&#13;
	// Connection to i5 server failed, use i5_errormsg() to get the failure reason&#13;
}</template><template autoinsert="true" context="php" deleted="false" description="Create i5/OS data area" enabled="true" id="com.zend.php.ui.editor.templates.php.i5.i5DataAreaCreate" name="i5DataAreaCreate">/*&#13;
This template allows to create i5/OS data area&#13;
&#13;
1. Conects to i5 server&#13;
2. Creates data area of given size&#13;
3. Closes connection to i5 server&#13;
&#13;
If you want to use additional connection options, remove comments in the array block&#13;
*/&#13;
&#13;
// Set connection parameters&#13;
$$connection_parameters = array(&#13;
//	I5_OPTIONS_JOBNAME 		=&gt; '${job_name}',	   // Define machine name by default&#13;
//	I5_OPTIONS_SQLNAMING 	=&gt; '${sql_naming}',	   // To use dotted (.) or slashed (/) notation in SQL requests&#13;
//	I5_OPTIONS_DECIMALPOINT =&gt; '${decimal_point}',  // To use dot or comma as decimal separator&#13;
//	I5_OPTIONS_CODEPAGEFILE =&gt; '${code_page_file}', // To use a specific code page&#13;
//	I5_OPTIONS_ALIAS		=&gt; '${alias}',		   // Enables naming a connection&#13;
//	I5_OPTIONS_INITLIBL		=&gt; '${init_libl}'		   // Specifies initial library&#13;
);&#13;
&#13;
$$conn = i5_connect('127.0.0.1', '${user_name}', '${password}', $$connection_parameters);&#13;
&#13;
if (is_resource($$conn)) {&#13;
	&#13;
	$$data_area = i5_data_area_create('${library_name}/${data_area_name}', ${size});&#13;
    &#13;
	if ($$data_area === true) {&#13;
    	${cursor}// ENTER YOUR CODE HERE!&#13;
    }&#13;
    &#13;
    else {&#13;
        // Failed to create the data area, use i5_errormsg() to get the failure reason&#13;
    }  &#13;
    &#13;
    if (!i5_close($$conn)) {&#13;
        // Failed to disconnect from i5 server, use i5_errormsg() to get the failure reason&#13;
    }  &#13;
}&#13;
    &#13;
else {&#13;
	// Connection to i5 server failed, use i5_errormsg() to get the failure reason&#13;
}&#13;</template><template autoinsert="true" context="php" deleted="false" description="Delete i5/OS data area" enabled="true" id="com.zend.php.ui.editor.templates.php.i5.i5DataAreaDelete" name="i5DataAreaDelete">/*&#13;
This template allows to delete i5/OS data area&#13;
&#13;
1. Conects to i5 server&#13;
2. Deletes data area&#13;
3. Closes connection to i5 server&#13;
&#13;
If you want to use additional connection options, remove comments in the array block&#13;
*/&#13;
&#13;
// Set connection parameters&#13;
$$connection_parameters = array(&#13;
//	I5_OPTIONS_JOBNAME 		=&gt; '${job_name}',	   // Define machine name by default&#13;
//	I5_OPTIONS_SQLNAMING 	=&gt; '${sql_naming}',	   // To use dotted (.) or slashed (/) notation in SQL requests&#13;
//	I5_OPTIONS_DECIMALPOINT =&gt; '${decimal_point}',  // To use dot or comma as decimal separator&#13;
//	I5_OPTIONS_CODEPAGEFILE =&gt; '${code_page_file}', // To use a specific code page&#13;
//	I5_OPTIONS_ALIAS		=&gt; '${alias}',		   // Enables naming a connection&#13;
//	I5_OPTIONS_INITLIBL		=&gt; '${init_libl}'		   // Specifies initial library&#13;
);&#13;
&#13;
$$conn = i5_connect('127.0.0.1', '${user_name}', '${password}', $$connection_parameters);&#13;
&#13;
if (is_resource($$conn)) {&#13;
	&#13;
	$$del = i5_data_area_delete('${library_name}/${data_area_name}');&#13;
    &#13;
	if ($$del === true) {&#13;
    	${cursor} // ENTER YOUR CODE HERE!&#13;
    }&#13;
    &#13;
    else {&#13;
        // Failed to delete the data area, use i5_errormsg() to get the failure reason&#13;
    }  &#13;
    &#13;
    if (!i5_close($$conn)) {&#13;
        // Failed to disconnect from i5 server, use i5_errormsg() to get the failure reason&#13;
    }  &#13;
}&#13;
    &#13;
else {&#13;
	// Connection to i5 server failed, use i5_errormsg() to get the failure reason&#13;
}&#13;</template><template autoinsert="true" context="php" deleted="false" description="Read i5/OS data area" enabled="true" id="com.zend.php.ui.editor.templates.php.i5.i5DataAreaRead" name="i5DataAreaRead">/*&#13;
This template allows to read i5/OS data area&#13;
&#13;
1. Conects to i5 server&#13;
2. Reads from data area&#13;
3. Closes connection to i5 server&#13;
&#13;
If you want to use additional connection options, remove comments in the array block&#13;
*/&#13;
&#13;
// Set connection parameters&#13;
$$connection_parameters = array(&#13;
//	I5_OPTIONS_JOBNAME 	=&gt; '${job_name}',	      // Define machine name by default&#13;
//	I5_OPTIONS_SQLNAMING 	=&gt; '${sql_naming}',     // To use dotted (.) or slashed (/) notation in SQL requests&#13;
//	I5_OPTIONS_DECIMALPOINT =&gt; '${decimal_point}',  // To use dot or comma as decimal separator&#13;
//	I5_OPTIONS_CODEPAGEFILE =&gt; '${code_page_file}', // To use a specific code page&#13;
//	I5_OPTIONS_ALIAS	=&gt; '${alias}',	      // Enables naming a connection&#13;
//	I5_OPTIONS_INITLIBL	=&gt; '${init_libl}'	      // Specifies initial library&#13;
);&#13;
&#13;
$$conn = i5_connect('127.0.0.1', '${user_name}', '${password}', $$connection_parameters);&#13;
&#13;
if (is_resource($$conn)) {&#13;
	// $$data variable contains data string from the data area&#13;
	$$data = i5_data_area_read('${library_name}/${data_area_name}'/*, '${offset}', '${length}'*/);&#13;
    &#13;
	if (is_string($$data)) {&#13;
    	${cursor}// ENTER YOUR CODE HERE!&#13;
    }&#13;
    &#13;
    else {&#13;
        // Failed to read from data area, use i5_errormsg() to get the failure reason&#13;
    }  &#13;
    &#13;
    if (!i5_close($$conn)) {&#13;
        // Failed to disconnect from i5 server, use i5_errormsg() to get the failure reason&#13;
    }  &#13;
}&#13;
    &#13;
else {&#13;
	// Connection to i5 server failed, use i5_errormsg() to get the failure reason&#13;
}&#13;</template><template autoinsert="true" context="php" deleted="false" description="Write i5/OS data area" enabled="true" id="com.zend.php.ui.editor.templates.php.i5.i5DataAreaWrite" name="i5DataAreaWrite">/*&#13;
This template allows to write i5/OS data area&#13;
&#13;
1. Conects to i5 server&#13;
2. Writes to data area&#13;
3. Closes connection to i5 server&#13;
&#13;
If you want to use additional connection options, remove comments in the array block&#13;
*/&#13;
&#13;
// Set connection parameters&#13;
$$connection_parameters = array(&#13;
//	I5_OPTIONS_JOBNAME 		=&gt; '${job_name}',	   // Define machine name by default&#13;
//	I5_OPTIONS_SQLNAMING 	=&gt; '${sql_naming}',	   // To use dotted (.) or slashed (/) notation in SQL requests&#13;
//	I5_OPTIONS_DECIMALPOINT =&gt; '${decimal_point}',  // To use dot or comma as decimal separator&#13;
//	I5_OPTIONS_CODEPAGEFILE =&gt; '${code_page_file}', // To use a specific code page&#13;
//	I5_OPTIONS_ALIAS		=&gt; '${alias}',		   // Enables naming a connection&#13;
//	I5_OPTIONS_INITLIBL		=&gt; '${init_libl}'	   // Specifies initial library&#13;
);&#13;
&#13;
$$conn = i5_connect('127.0.0.1', '${user_name}', '${password}', $$connection_parameters);&#13;
&#13;
if (is_resource($$conn)) {&#13;
	// $$data variable contains data string from the data area&#13;
	$$ret = i5_data_area_write('${library_name}/${data_area_name}', '${value}'/*, '${offset}', '${length}'*/);&#13;
    &#13;
	if ($$ret === true) {&#13;
    	${cursor}// ENTER YOUR CODE HERE!&#13;
    }&#13;
    &#13;
    else {&#13;
        // Failed to write to the data area, use i5_errormsg() to get the failure reason&#13;
    }  &#13;
    &#13;
    if (!i5_close($$conn)) {&#13;
        // Failed to disconnect from i5 server, use i5_errormsg() to get the failure reason&#13;
    }  &#13;
}&#13;
    &#13;
else {&#13;
	// Connection to i5 server failed, use i5_errormsg() to get the failure reason&#13;
}</template><template autoinsert="true" context="php" deleted="false" description="Read i5/OS data queue without key" enabled="true" id="com.zend.php.ui.editor.templates.php.i5.i5DtaqRecieve" name="i5DtaqRecieve">/*&#13;
This template allows to read i5/OS data queue without key&#13;
&#13;
1. Conects to i5 server&#13;
2. Reads data from the data queue without key&#13;
3. Closes connection to i5 server&#13;
&#13;
If you want to use additional connection options, remove comments in the array block&#13;
*/&#13;
&#13;
// Set connection parameters&#13;
$$connection_parameters = array(&#13;
//	I5_OPTIONS_JOBNAME 		=&gt; '${job_name}',	   // Define machine name by default&#13;
//	I5_OPTIONS_SQLNAMING 	=&gt; '${sql_naming}',	   // To use dotted (.) or slashed (/) notation in SQL requests&#13;
//	I5_OPTIONS_DECIMALPOINT =&gt; '${decimal_point}',  // To use dot or comma as decimal separator&#13;
//	I5_OPTIONS_CODEPAGEFILE =&gt; '${code_page_file}', // To use a specific code page&#13;
//	I5_OPTIONS_ALIAS		=&gt; '${alias}',		   // Enables naming a connection&#13;
//	I5_OPTIONS_INITLIBL		=&gt; '${init_libl}'		   // Specifies initial library&#13;
);&#13;
&#13;
$$conn = i5_connect('127.0.0.1', '${user_name}', '${password}', $$connection_parameters);&#13;
&#13;
if (is_resource($$conn)) {&#13;
    &#13;
  /*PHP-format program description. This should be provided if the program is not described on server.&#13;
    Name - name of the field&#13;
&#13;
    ype - type of the field, can be:&#13;
    I5_TYPE_CHAR&#13;
    I5_TYPE_INT&#13;
    I5_TYPE_PACKED&#13;
    I5_TYPE_ZONED&#13;
    I5_TYPE_FLOAT&#13;
    I5_TYPE_BYTE&#13;
    I5_TYPE_STRUCT&#13;
    &#13;
    IO can be:&#13;
    I5_IN&#13;
    I5_OUT&#13;
    I5_INOUT&#13;
    &#13;
    Length:&#13;
    for CHAR, BYTE - integer describing length. Length can be number or name of the variable holding the length in the data structure.&#13;
    for PACKED, ZONED - string "NUMBER.NUMBER" defining length and precision&#13;
    for STRUCT - array containing data definition of the structure&#13;
    for INT, FLOAT - ignored&#13;
&#13;
    Count (optional) - repetition count if the field is an array&#13;
    CountRef (optional) - reference to the repetition count if the field is an array*/&#13;
&#13;
    $$description = array ('Name' =&gt; '${var}', 'IO' =&gt; I5_INOUT, 'Type' =&gt; I5_TYPE_CHAR, 'Length'=&gt; '${len}');&#13;
              &#13;
    $$dtaq = i5_dtaq_prepare('${library_name}/${queue_name}', $$description); &#13;
    &#13;
    if (is_resource($$dtaq)) {&#13;
    	&#13;
        $$data = i5_dtaq_receive($$dtaq);&#13;
        &#13;
        if ($$data ==! false) {&#13;
    	    // $$data variable contains data that received from the queue&#13;
    	    ${cursor}// ENTER YOUR CODE HERE!&#13;
    	}&#13;
        &#13;
    	else {&#13;
            // Failed to read data from the data queue&#13;
        }&#13;
        &#13;
    	if (!i5_dtaq_close ($$dtaq)) {&#13;
    		// Failed to free program resource handle, use i5_errormsg() to get the failure reason&#13;
    	}       &#13;
    }&#13;
    &#13;
    else {&#13;
    	// Failed to read data from the data queue, use i5_errormsg() to get the failure reason&#13;
    }   &#13;
&#13;
    if (!i5_close($$conn)) {&#13;
        // Failed to disconnect from i5 server, use i5_errormsg() to get the failure reason&#13;
    }   &#13;
}  &#13;
else {&#13;
	// Connection to i5 server failed, use i5_errormsg() to get the failure reason&#13;
}</template><template autoinsert="true" context="php" deleted="false" description="Read i5/OS data queue with key" enabled="true" id="com.zend.php.ui.editor.templates.php.i5.i5DtaqRecieveKey" name="i5DtaqRecieveKey">/*&#13;
This template allows to readi5/OS data queue with key&#13;
&#13;
1. Conects to i5 server&#13;
2. Reads data from the data queue with key&#13;
3. Closes connection to i5 server&#13;
&#13;
If you want to use additional connection options, remove comments in the array block&#13;
*/&#13;
&#13;
// Set connection parameters&#13;
$$connection_parameters = array(&#13;
//	I5_OPTIONS_JOBNAME 		=&gt; '${job_name}',	   // Define machine name by default&#13;
//	I5_OPTIONS_SQLNAMING 	=&gt; '${sql_naming}',	   // To use dotted (.) or slashed (/) notation in SQL requests&#13;
//	I5_OPTIONS_DECIMALPOINT =&gt; '${decimal_point}',  // To use dot or comma as decimal separator&#13;
//	I5_OPTIONS_CODEPAGEFILE =&gt; '${code_page_file}', // To use a specific code page&#13;
//	I5_OPTIONS_ALIAS		=&gt; '${alias}',		   // Enables naming a connection&#13;
//	I5_OPTIONS_INITLIBL		=&gt; '${init_libl}'		   // Specifies initial library&#13;
);&#13;
&#13;
$$conn = i5_connect('127.0.0.1', '${user_name}', '${password}', $$connection_parameters);&#13;
&#13;
if (is_resource($$conn)) {&#13;
    &#13;
  /*PHP-format program description. This should be provided if the program is not described on server.&#13;
    Name - name of the field&#13;
&#13;
    ype - type of the field, can be:&#13;
    I5_TYPE_CHAR&#13;
    I5_TYPE_INT&#13;
    I5_TYPE_PACKED&#13;
    I5_TYPE_ZONED&#13;
    I5_TYPE_FLOAT&#13;
    I5_TYPE_BYTE&#13;
    I5_TYPE_STRUCT&#13;
    &#13;
    IO can be:&#13;
    I5_IN&#13;
    I5_OUT&#13;
    I5_INOUT&#13;
    &#13;
    Length:&#13;
    for CHAR, BYTE - integer describing length. Length can be number or name of the variable holding the length in the data structure.&#13;
    for PACKED, ZONED - string "NUMBER.NUMBER" defining length and precision&#13;
    for STRUCT - array containing data definition of the structure&#13;
    for INT, FLOAT - ignored&#13;
&#13;
    Count (optional) - repetition count if the field is an array&#13;
    CountRef (optional) - reference to the repetition count if the field is an array*/&#13;
&#13;
    $$description = array ('Name' =&gt; '${var}', 'IO' =&gt; I5_INOUT, 'Type' =&gt; I5_TYPE_CHAR, 'Length'=&gt; '${len}');&#13;
              &#13;
    $$dtaq = i5_dtaq_prepare('${library_name}/${queue_name}', $$description, '${key_length}'); &#13;
    &#13;
    if (is_resource($$dtaq)) {&#13;
    	&#13;
        $$data = i5_dtaq_receive($$dtaq, '${operator}', '${key}');&#13;
    	&#13;
        if ($$data ==! false) {&#13;
            // $$data variable contains data that received from the queue&#13;
    	    ${cursor}// ENTER YOUR CODE HERE!&#13;
    	}&#13;
    	&#13;
    	else {&#13;
    	    // Failed to read data from the data queue&#13;
    	}&#13;
        &#13;
    	if (!i5_dtaq_close ($$dtaq)) {&#13;
    		// Failed to free program resource handle, use i5_errormsg() to get the failure reason&#13;
    	}       &#13;
    }&#13;
    &#13;
    else {&#13;
    	// Failed to read data from the data queue, use i5_errormsg() to get the failure reason&#13;
    }   &#13;
&#13;
    if (!i5_close($$conn)) {&#13;
        // Failed to disconnect from i5 server, use i5_errormsg() to get the failure reason&#13;
    }   &#13;
}  &#13;
else {&#13;
	// Connection to i5 server failed, use i5_errormsg() to get the failure reason&#13;
}</template><template autoinsert="true" context="php" deleted="false" description="Write i5/OS data queue without key" enabled="true" id="com.zend.php.ui.editor.templates.php.i5.i5DtaqSend" name="i5DtaqSend">/*&#13;
This template allows to write i5/OS data queue without key&#13;
&#13;
1. Conects to i5 server&#13;
2. Puts data to the data queue without key&#13;
3. Closes connection to i5 server&#13;
&#13;
If you want to use additional connection options, remove comments in the array block&#13;
*/&#13;
&#13;
// Set connection parameters&#13;
$$connection_parameters = array(&#13;
//	I5_OPTIONS_JOBNAME 		=&gt; '${job_name}',	   // Define machine name by default&#13;
//	I5_OPTIONS_SQLNAMING 	=&gt; '${sql_naming}',	   // To use dotted (.) or slashed (/) notation in SQL requests&#13;
//	I5_OPTIONS_DECIMALPOINT =&gt; '${decimal_point}',  // To use dot or comma as decimal separator&#13;
//	I5_OPTIONS_CODEPAGEFILE =&gt; '${code_page_file}', // To use a specific code page&#13;
//	I5_OPTIONS_ALIAS		=&gt; '${alias}',		   // Enables naming a connection&#13;
//	I5_OPTIONS_INITLIBL		=&gt; '${init_libl}'	   // Specifies initial library&#13;
);&#13;
&#13;
$$conn = i5_connect('127.0.0.1', '${user_name}', '${password}', $$connection_parameters);&#13;
&#13;
if (is_resource($$conn)) {&#13;
    &#13;
  /*PHP-format program description. This should be provided if the program is not described on server.&#13;
    Name - name of the field&#13;
&#13;
    ype - type of the field, can be:&#13;
    I5_TYPE_CHAR&#13;
    I5_TYPE_INT&#13;
    I5_TYPE_PACKED&#13;
    I5_TYPE_ZONED&#13;
    I5_TYPE_FLOAT&#13;
    I5_TYPE_BYTE&#13;
    I5_TYPE_STRUCT&#13;
    &#13;
    IO can be:&#13;
    I5_IN&#13;
    I5_OUT&#13;
    I5_INOUT&#13;
    &#13;
    Length:&#13;
    for CHAR, BYTE - integer describing length. Length can be number or name of the variable holding the length in the data structure.&#13;
    for PACKED, ZONED - string "NUMBER.NUMBER" defining length and precision&#13;
    for STRUCT - array containing data definition of the structure&#13;
    for INT, FLOAT - ignored&#13;
&#13;
    Count (optional) - repetition count if the field is an array&#13;
    CountRef (optional) - reference to the repetition count if the field is an array*/&#13;
&#13;
    $$description = array ('Name' =&gt; '${var}', 'IO' =&gt; I5_INOUT, 'Type' =&gt; I5_TYPE_CHAR, 'Length'=&gt; '${len}');&#13;
              &#13;
    $$dtaq = i5_dtaq_prepare('${library_name}/${queue_name}', $$description); &#13;
    &#13;
    if (is_resource($$dtaq)) {&#13;
    	&#13;
        $$ret = i5_dtaq_send($$dtaq, '', '${data_send}') ;&#13;
        &#13;
        if ($$ret === true) {&#13;
    	    &#13;
    	    ${cursor}// ENTER YOUR CODE HERE!&#13;
    	}&#13;
        &#13;
    	else {&#13;
            // Failed to put data to the data queue, use i5_errormsg() to get the failure reason&#13;
        }&#13;
        &#13;
    	if (!i5_dtaq_close ($$dtaq)) {&#13;
    		// Failed to free program resource handle, use i5_errormsg() to get the failure reason&#13;
    	}       &#13;
    }&#13;
    &#13;
    else {&#13;
    	// Failed to read data from the data queue, use i5_errormsg() to get the failure reason&#13;
    }   &#13;
&#13;
    if (!i5_close($$conn)) {&#13;
        // Failed to disconnect from i5 server, use i5_errormsg() to get the failure reason&#13;
    }   &#13;
}  &#13;
else {&#13;
	// Connection to i5 server failed, use i5_errormsg() to get the failure reason&#13;
}</template><template autoinsert="true" context="php" deleted="false" description="Write i5/OS data queue with key" enabled="true" id="com.zend.php.ui.editor.templates.php.i5.i5DtaqSendKey" name="i5DtaqSendKey">/*&#13;
This template allows to write i5/OS data queue without key&#13;
&#13;
1. Conects to i5 server&#13;
2. Puts data to the data queue without key&#13;
3. Closes connection to i5 server&#13;
&#13;
If you want to use additional connection options, remove comments in the array block&#13;
*/&#13;
&#13;
// Set connection parameters&#13;
$$connection_parameters = array(&#13;
//	I5_OPTIONS_JOBNAME 		=&gt; '${job_name}',	   // Define machine name by default&#13;
//	I5_OPTIONS_SQLNAMING 	=&gt; '${sql_naming}',	   // To use dotted (.) or slashed (/) notation in SQL requests&#13;
//	I5_OPTIONS_DECIMALPOINT =&gt; '${decimal_point}',  // To use dot or comma as decimal separator&#13;
//	I5_OPTIONS_CODEPAGEFILE =&gt; '${code_page_file}', // To use a specific code page&#13;
//	I5_OPTIONS_ALIAS		=&gt; '${alias}',		   // Enables naming a connection&#13;
//	I5_OPTIONS_INITLIBL		=&gt; '${init_libl}'		   // Specifies initial library&#13;
);&#13;
&#13;
$$conn = i5_connect('127.0.0.1', '${user_name}', '${password}', $$connection_parameters);&#13;
&#13;
if (is_resource($$conn)) {&#13;
    &#13;
  /*PHP-format program description. This should be provided if the program is not described on server.&#13;
    Name - name of the field&#13;
&#13;
    ype - type of the field, can be:&#13;
    I5_TYPE_CHAR&#13;
    I5_TYPE_INT&#13;
    I5_TYPE_PACKED&#13;
    I5_TYPE_ZONED&#13;
    I5_TYPE_FLOAT&#13;
    I5_TYPE_BYTE&#13;
    I5_TYPE_STRUCT&#13;
    &#13;
    IO can be:&#13;
    I5_IN&#13;
    I5_OUT&#13;
    I5_INOUT&#13;
    &#13;
    Length:&#13;
    for CHAR, BYTE - integer describing length. Length can be number or name of the variable holding the length in the data structure.&#13;
    for PACKED, ZONED - string "NUMBER.NUMBER" defining length and precision&#13;
    for STRUCT - array containing data definition of the structure&#13;
    for INT, FLOAT - ignored&#13;
&#13;
    Count (optional) - repetition count if the field is an array&#13;
    CountRef (optional) - reference to the repetition count if the field is an array*/&#13;
&#13;
    $$description = array ('Name' =&gt; '${var}', 'IO' =&gt; I5_INOUT, 'Type' =&gt; I5_TYPE_CHAR, 'Length'=&gt; '${len}');&#13;
              &#13;
    $$dtaq = i5_dtaq_prepare('${library_name}/${queue_name}', $$description, '${key_length}'); &#13;
    &#13;
    if (is_resource($$dtaq)) {&#13;
    	&#13;
        $$ret = i5_dtaq_send($$dtaq, '${key}', '${data_send}') ;&#13;
        &#13;
        if ($$ret === true) {&#13;
    	    &#13;
    	    ${cursor}// ENTER YOUR CODE HERE!&#13;
    	}&#13;
        &#13;
    	else {&#13;
            // Failed to put data to the data queue, use i5_errormsg() to get the failure reason&#13;
        }&#13;
        &#13;
    	if (!i5_dtaq_close ($$dtaq)) {&#13;
    		// Failed to free program resource handle, use i5_errormsg() to get the failure reason&#13;
    	}       &#13;
    }&#13;
    &#13;
    else {&#13;
    	// Failed to read data from the data queue, use i5_errormsg() to get the failure reason&#13;
    }   &#13;
&#13;
    if (!i5_close($$conn)) {&#13;
        // Failed to disconnect from i5 server, use i5_errormsg() to get the failure reason&#13;
    }   &#13;
}  &#13;
else {&#13;
	// Connection to i5 server failed, use i5_errormsg() to get the failure reason&#13;
}</template><template autoinsert="true" context="php" deleted="false" description="Read i5/OS job log" enabled="true" id="com.zend.php.ui.editor.templates.php.i5.i5JobLogs" name="i5JobLogs">/*&#13;
This template allows to read i5/OS job log &#13;
&#13;
1. Conects to i5 server&#13;
2. Opens job log&#13;
3. Gets array for a job log entry  &#13;
4. Closes handle received from i5_jobLog_list function&#13;
5. Closes connection to i5 server&#13;
&#13;
If you want to use additional connection options, remove comments in the array block&#13;
*/&#13;
&#13;
// Set connection parameters&#13;
$$connection_parameters = array(&#13;
//	I5_OPTIONS_JOBNAME 		=&gt; '${job__name}',	   // Define machine name by default&#13;
//	I5_OPTIONS_SQLNAMING 	=&gt; '${sql_naming}',	   // To use dotted (.) or slashed (/) notation in SQL requests&#13;
//	I5_OPTIONS_DECIMALPOINT =&gt; '${decimal_point}',  // To use dot or comma as decimal separator&#13;
//	I5_OPTIONS_CODEPAGEFILE =&gt; '${code_page_file}', // To use a specific code page&#13;
//	I5_OPTIONS_ALIAS		=&gt; '${alias}',		   // Enables naming a connection&#13;
//	I5_OPTIONS_INITLIBL		=&gt; '${init_libl}'		   // Specifies initial library&#13;
);&#13;
&#13;
$$conn = i5_connect('127.0.0.1', '${user_name}', '${password}', $$connection_parameters);&#13;
&#13;
if (is_resource($$conn)) {&#13;
&#13;
    $$elements = array(&#13;
    // JOBNAME   =&gt; '${job_name}', &#13;
    // JOBUSER   =&gt; '${job_user}',&#13;
    // JOBNUMBER =&gt; '${job_number}',&#13;
    // JOBTYPE   =&gt; '${job_type}',&#13;
    // DIRECTION =&gt; '${direction}' //(default is current job)  &#13;
    );&#13;
&#13;
    //connection - result of i5_connect  &#13;
&#13;
    $$jobLog = i5_jobLog_list($$elements);&#13;
&#13;
    if (is_resource($$jobLog)) { &#13;
    	// Use i5_jobLog_list_read function to retrieve the job entries from this handle&#13;
	    $$jobLog_read = i5_jobLog_list_read($$jobLog);&#13;
&#13;
	    if (is_array($$jobLog_read)) {     	    	&#13;
	    	// $$jobLog_read variable contains array for a job log entry 	&#13;
	        ${cursor} // INSERT YOUR CODE HERE !!!&#13;
	    } &#13;
	    &#13;
	    else {&#13;
        	// Failed to get array for a job log entry , need to close the job log list and the i5 connection     &#13;
        }&#13;
    } &#13;
    &#13;
    else {     &#13;
    	// Failed to open job log, use i5_errormsg() to get the failure reason and close the connection to i5 server &#13;
    }&#13;
&#13;
    if (!i5_jobLog_list_close($$jobLog)) {&#13;
        // Failed to close handle received from i5_jobLog_list function, use i5_errormsg() to get the failure reason and close the connection to i5 server&#13;
    }&#13;
    &#13;
    if (!i5_close($$conn)) {&#13;
        // Failed to disconnect from i5 server, use i5_errormsg() to get the failure reason&#13;
    }&#13;
} &#13;
&#13;
else {&#13;
	// Connection to i5 server failed, use i5_errormsg() to get the failure reason&#13;
}</template><template autoinsert="true" context="php" deleted="false" description="Work with i5/OS objects" enabled="true" id="com.zend.php.ui.editor.templates.php.i5.i5ObjectListing" name="i5ObjectListing">/*&#13;
This template allows to get array with objects elements from the object list &#13;
&#13;
1. Conects to i5 server&#13;
2. Opens object list &#13;
3. Gets for a object list entry   &#13;
4. Closes handle received from i5_objects_list function&#13;
5. Closes connection to i5 server&#13;
&#13;
If you want to use additional connection options, remove comments in the array block&#13;
*/&#13;
&#13;
// Set connection parameters&#13;
$$connection_parameters = array(&#13;
//	I5_OPTIONS_JOBNAME 		=&gt; '${job_name}',	      // Define machine name by default&#13;
//	I5_OPTIONS_SQLNAMING 	=&gt; '${sql_naming}',	  // To use dotted (.) or slashed (/) notation in SQL requests&#13;
//	I5_OPTIONS_DECIMALPOINT =&gt; '${decimal_point}',  // To use dot or comma as decimal separator&#13;
//	I5_OPTIONS_CODEPAGEFILE =&gt; '${code_page_file}', // To use a specific code page&#13;
//	I5_OPTIONS_ALIAS		=&gt; '${alias}',		  // Enables naming a connection&#13;
//	I5_OPTIONS_INITLIBL		=&gt; '${init_libl}'		  // Specifies initial library&#13;
);&#13;
&#13;
$$conn = i5_connect('127.0.0.1', '${user_name}', '${password}', $$connection_parameters);&#13;
&#13;
if (is_resource($$conn)) {  &#13;
&#13;
    $$objects = i5_objects_list('${library}'/*, '${type}', '${name}' */);&#13;
&#13;
    if (is_resource($$objects)) { &#13;
    	// Use i5_objects_list_read function to retrieve object records&#13;
	    $$obj_read = i5_objects_list_read($$objects);&#13;
&#13;
	    if (is_array($$obj_read)) {     	    	&#13;
	    	// $$obj_read variable contains array with the message element for a object list entry  	&#13;
	        ${cursor}// INSERT YOUR CODE HERE !!!&#13;
	    } &#13;
	    &#13;
	    else {&#13;
        	// Failed to get array for object list entry , need to close the job log list and the i5 connection     &#13;
        }&#13;
    } &#13;
    &#13;
    else {     &#13;
    	// Failed to open object list, use i5_errormsg() to get the failure reason and close the connection to i5 server &#13;
    }&#13;
&#13;
    if (!i5_objects_list_close($$objects)) {&#13;
        // Failed to close handle received from i5_objects_list function, use i5_errormsg() to get the failure reason and close the connection to i5 server&#13;
    }&#13;
    &#13;
    if (!i5_close($$conn)) {&#13;
        // Failed to disconnect from i5 server, use i5_errormsg() to get the failure reason&#13;
    }&#13;
} &#13;
&#13;
else {&#13;
	// Connection to i5 server failed, use i5_errormsg() to get the failure reason&#13;
}&#13;</template><template autoinsert="true" context="php" deleted="false" description="Call i5/OS program" enabled="true" id="com.zend.php.ui.editor.templates.php.i5.i5Program" name="i5Program">/*&#13;
This template allows to call any i5/OS program with parameters&#13;
&#13;
1. Conects to i5 server&#13;
2. Opens a program or service procedure and prepares it to be run&#13;
3. Calls the program and optionally accepts results  &#13;
4. Free program resource handle &#13;
5. Closes connection to i5 server */&#13;
&#13;
// Set connection parameters:&#13;
// If you want to use additional connection options, remove comments in the array block  &#13;
&#13;
$$connection_parameters = array(&#13;
// I5_OPTIONS_JOBNAME 		=&gt; '${job_name}',	      // Define machine name by default&#13;
// I5_OPTIONS_SQLNAMING 	=&gt; '${sql_naming}',     // To use dotted (.) or slashed (/) notation in SQL requests&#13;
// I5_OPTIONS_DECIMALPOINT  =&gt; '${decimal_point}',  // To use dot or comma as decimal separator&#13;
// I5_OPTIONS_CODEPAGEFILE  =&gt; '${code_page_file}', // To use a specific code page&#13;
// I5_OPTIONS_ALIAS		    =&gt; '${alias}',		  // Enables naming a connection&#13;
// I5_OPTIONS_INITLIBL		=&gt; '${init_libl}'	      // Specifies initial library&#13;
);&#13;
&#13;
$$conn = i5_connect('127.0.0.1', '${user_name}', '${password}'/*, $$connection_parameters*/);&#13;
if (is_resource($$conn)) {&#13;
	    &#13;
 /* Prepare File for execution &#13;
    PHP-format program description&#13;
    This should be provided if the program is not described on server &#13;
    &#13;
    Name - name of the field&#13;
    &#13;
    Type - type of the field, can be: &#13;
    I5_TYPE_CHAR&#13;
    I5_TYPE_INT&#13;
    I5_TYPE_PACKED&#13;
    I5_TYPE_ZONED&#13;
    I5_TYPE_FLOAT&#13;
    I5_TYPE_BYTE&#13;
    I5_TYPE_STRUCT&#13;
    &#13;
    IO can be:&#13;
    I5_IN&#13;
    I5_OUT&#13;
    I5_INOUT&#13;
    &#13;
    Length:&#13;
    for CHAR, BYTE - integer describing length. Length can be number or name of the &lt;var_iable holding the length in the data structure.&#13;
    for PACKED, ZONED - string "NUMBER.NUMBER" defining length and precision&#13;
    for STRUCT - array containing data definition of the structure&#13;
    for INT, FLOAT - ignored&#13;
    &#13;
    Count (optional) - repetition count if the field is an array&#13;
    CountRef (optional) - reference to the repetition count if the field is an array */&#13;
&#13;
    $$description = Array (&#13;
    array ('Name' =&gt; '${name_0}', 'IO' =&gt; I5_INOUT, 'Type' =&gt; I5_TYPE_CHAR, 'Length' =&gt; '${len_0}'),&#13;
    array ('Name' =&gt; '${name_1}', 'IO' =&gt; I5_INOUT, 'Type' =&gt; I5_TYPE_CHAR, 'Length' =&gt; '${len_1}')//,&#13;
 // array ('Name' =&gt; '${name_2}', 'IO' =&gt; I5_INOUT, 'Type' =&gt; I5_TYPE_CHAR, 'Length' =&gt; '${len_2}'),&#13;
 // array ('Name' =&gt; '${name_3}', 'IO' =&gt; I5_INOUT, 'Type' =&gt; I5_TYPE_CHAR, 'Length' =&gt; '${len_3}'),&#13;
 // array ('Name' =&gt; '${name_4}', 'IO' =&gt; I5_INOUT, 'Type' =&gt; I5_TYPE_CHAR, 'Length' =&gt; '${len_4}'),&#13;
 // array ('Name' =&gt; '${name_5}', 'IO' =&gt; I5_INOUT, 'Type' =&gt; I5_TYPE_CHAR, 'Length' =&gt; '${len_5}'),&#13;
 // array ('Name' =&gt; '${name_6}', 'IO' =&gt; I5_INOUT, 'Type' =&gt; I5_TYPE_CHAR, 'Length' =&gt; '${len_6}'),&#13;
 // array ('Name' =&gt; '${name_7}', 'IO' =&gt; I5_INOUT, 'Type' =&gt; I5_TYPE_CHAR, 'Length' =&gt; '${len_7}'),&#13;
 // array ('Name' =&gt; '${name_8}', 'IO' =&gt; I5_INOUT, 'Type' =&gt; I5_TYPE_CHAR, 'Length' =&gt; '${len_8}'),&#13;
 // array ('Name' =&gt; '${name_9}', 'IO' =&gt; I5_INOUT, 'Type' =&gt; I5_TYPE_CHAR, 'Length' =&gt; '${len_9}')&#13;
    );&#13;
    &#13;
    $$prog = i5_program_prepare('${library_name}/${prog_name}', $$description); &#13;
&#13;
    if (is_resource($$prog)) {   &#13;
    &#13;
     /* Execute Program */&#13;
        $$params = array (&#13;
         '${name_0}' =&gt; $$var_0, '${name_1}' =&gt; $$var_1//,&#13;
     // '${name_2}' =&gt; $$var_2, '${name_3}' =&gt; $$var_3,&#13;
     // '${name_4}' =&gt; $$var_4, '${name_5}' =&gt; $$var_5,&#13;
     // '${name_6}' =&gt; $$var_6, '${name_7}' =&gt; $$var_7,&#13;
     // '${name_8}' =&gt; $$var_8, '${name_9}' =&gt; $$var_9&#13;
        );&#13;
           &#13;
        $$retvals = array(&#13;
        '${name_0}' =&gt; '${retval_0}', '${name_1}' =&gt; '${retval_1}'//,&#13;
     // '${name_2}' =&gt; '${retval_2}', '${name_3}' =&gt; '${retval_3}',&#13;
     // '${name_4}' =&gt; '${retval_4}', '${name_5}' =&gt; '${retval_5}',&#13;
     // '${name_6}' =&gt; '${retval_6}', '${name_7}' =&gt; '${retval_7}',&#13;
     // '${name_8}' =&gt; '${retval_8}', '${name_9}' =&gt; '${retval_9}'&#13;
        );&#13;
&#13;
        $$ret = i5_program_call($$prog, $$params, $$retvals) ;&#13;
&#13;
        if ($$ret === true) {&#13;
                &#13;
             ${cursor}// ENTER YOUR CODE HERE!&#13;
        } &#13;
            &#13;
        else {&#13;
             // Failed to call the program, use i5_errormsg() to get the failure reason&#13;
        } &#13;
                &#13;
        if (!i5_program_close ($$prog) ) {&#13;
             // Failed to free program resource handle, use i5_errormsg() to get the failure reason&#13;
        }  &#13;
    } &#13;
      &#13;
    else {&#13;
        // Program prepare failed, use i5_errormsg() to get the failure reason      &#13;
        }   &#13;
	&#13;
    if (!i5_close($$conn)) {&#13;
            // Failed to disconnect from i5 server, use i5_errormsg() to get the failure reason&#13;
        }&#13;
}&#13;
&#13;
else {&#13;
	// Failed to connect to i5 server,  use i5_errormsg() to get the failure reason&#13;
}</template><template autoinsert="true" context="php" deleted="false" description="Create a Web service for i5/OS program" enabled="true" id="com.zend.php.ui.editor.templates.php.i5.i5ProgramService" name="i5ProgramService">/*&#13;
This template creates Web Service allowing to invoke an i5/OS program &#13;
&#13;
1. Conects to i5 server&#13;
2. Opens a program or service procedure and prepares it to be run&#13;
3. Calls the program and optionally accepts results  &#13;
4. Free program resource handle &#13;
5. Closes connection to i5 server &#13;
&#13;
*/&#13;
&#13;
/*&#13;
	 * @param string $$var_0&#13;
	 * @param string $$var_1&#13;
	 */&#13;
	 &#13;
class i5_program_service {&#13;
	&#13;
	private $$conn = false;&#13;
&#13;
	function __construct() {&#13;
	    &#13;
		// Set connection parameters:&#13;
        // If you want to use additional connection options, remove comments in the array block  &#13;
&#13;
        $$connection_parameters = array(&#13;
        // I5_OPTIONS_JOBNAME 		=&gt; '${job_name}',		  // Define machine name by default&#13;
        // I5_OPTIONS_SQLNAMING 	=&gt; '${sql_naming}',     // To use dotted (.) or slashed (/) notation in SQL requests&#13;
        // I5_OPTIONS_DECIMALPOINT  =&gt; '${decimal_point}',  // To use dot or comma as decimal separator&#13;
        // I5_OPTIONS_CODEPAGEFILE  =&gt; '${code_page_file}', // To use a specific code page&#13;
        // I5_OPTIONS_ALIAS		    =&gt; '${alias}',		  // Enables naming a connection&#13;
        // I5_OPTIONS_INITLIBL		=&gt; '${init_libl}'		  // Specifies initial library&#13;
        );&#13;
&#13;
        $$this-&gt;conn = i5_connect('127.0.0.1', '${user_name}', '${password}'/*, $$connection_parameters*/);&#13;
        if (!is_resource($$this-&gt;conn)) {&#13;
		     throw new SoapFault('i5_program_service', 'Connection to i5 server failed, use i5_errormsg() to get the failure reason');&#13;
	    }&#13;
		&#13;
	}&#13;
	&#13;
	public function service_for_i5_program($$var_0, $$var_1 /*, $$var_2, $$var_3, $$var_4, $$var_5, $$var_6, $$var_7, $$var_8, $$var_9 */) {&#13;
&#13;
     /* Prepare File for execution &#13;
        PHP-format program description&#13;
        This should be provided if the program is not described on server &#13;
    &#13;
        Name - name of the field&#13;
    &#13;
        Type - type of the field, can be: &#13;
        I5_TYPE_CHAR&#13;
        I5_TYPE_INT&#13;
        I5_TYPE_PACKED&#13;
        I5_TYPE_ZONED&#13;
        I5_TYPE_FLOAT&#13;
        I5_TYPE_BYTE&#13;
        I5_TYPE_STRUCT&#13;
    &#13;
        IO can be:&#13;
        I5_IN&#13;
        I5_OUT&#13;
        I5_INOUT&#13;
    &#13;
        Length:&#13;
        for CHAR, BYTE - integer describing length. Length can be number or name of the &lt;var_iable holding the length in the data structure.&#13;
        for PACKED, ZONED - string "NUMBER.NUMBER" defining length and precision&#13;
        for STRUCT - array containing data definition of the structure&#13;
        for INT, FLOAT - ignored&#13;
    &#13;
        Count (optional) - repetition count if the field is an array&#13;
        CountRef (optional) - reference to the repetition count if the field is an array */&#13;
&#13;
        $$description = Array (&#13;
        array ('Name' =&gt; '${name_0}', 'IO' =&gt; I5_INOUT, 'Type' =&gt; I5_TYPE_CHAR, 'Length' =&gt; '${len_0}'),&#13;
        array ('Name' =&gt; '${name_1}', 'IO' =&gt; I5_INOUT, 'Type' =&gt; I5_TYPE_CHAR, 'Length' =&gt; '${len_1}')//,&#13;
     // array ('Name' =&gt; '${name_2}', 'IO' =&gt; I5_INOUT, 'Type' =&gt; I5_TYPE_CHAR, 'Length' =&gt; '${len_2}'),&#13;
     // array ('Name' =&gt; '${name_3}', 'IO' =&gt; I5_INOUT, 'Type' =&gt; I5_TYPE_CHAR, 'Length' =&gt; '${len_3}'),&#13;
     // array ('Name' =&gt; '${name_4}', 'IO' =&gt; I5_INOUT, 'Type' =&gt; I5_TYPE_CHAR, 'Length' =&gt; '${len_4}'),&#13;
     // array ('Name' =&gt; '${name_5}', 'IO' =&gt; I5_INOUT, 'Type' =&gt; I5_TYPE_CHAR, 'Length' =&gt; '${len_5}'),&#13;
     // array ('Name' =&gt; '${name_6}', 'IO' =&gt; I5_INOUT, 'Type' =&gt; I5_TYPE_CHAR, 'Length' =&gt; '${len_6}'),&#13;
     // array ('Name' =&gt; '${name_7}', 'IO' =&gt; I5_INOUT, 'Type' =&gt; I5_TYPE_CHAR, 'Length' =&gt; '${len_7}'),&#13;
     // array ('Name' =&gt; '${name_8}', 'IO' =&gt; I5_INOUT, 'Type' =&gt; I5_TYPE_CHAR, 'Length' =&gt; '${len_8}'),&#13;
     // array ('Name' =&gt; '${name_9}', 'IO' =&gt; I5_INOUT, 'Type' =&gt; I5_TYPE_CHAR, 'Length' =&gt; '${len_9}')&#13;
        );&#13;
    &#13;
        $$prog = i5_program_prepare('${library_name}/${prog_name}', $$description, $$this-&gt;conn); &#13;
&#13;
        if (is_resource($$prog)) {   &#13;
    &#13;
         /* Execute Program */&#13;
            $$params = array (&#13;
            '${name_0}' =&gt; $$var_0, '${name_1}' =&gt; $$var_1//,&#13;
         // '${name_2}' =&gt; $$var_2, '${name_3}' =&gt; $$var_3,&#13;
         //' ${name_4}' =&gt; $$var_4, '${name_5}' =&gt; $$var_5,&#13;
         // '${name_6}' =&gt; $$var_6, '${name_7}' =&gt; $$var_7,&#13;
         // '${name_8}' =&gt; $$var_8, '${name_9}' =&gt; $$var_9&#13;
            );&#13;
           &#13;
            $$retvals = array(&#13;
            '${name_0}' =&gt; ${retval_0}, ${name_1} =&gt; '${retval_1}'//,&#13;
         // '${name_2}' =&gt; ${retval_2}, ${name_3} =&gt; '${retval_3}',&#13;
         // '${name_4}' =&gt; ${retval_4}, ${name_5} =&gt; '${retval_5}',&#13;
         // '${name_6}' =&gt; ${retval_6}, ${name_7} =&gt; '${retval_7}',&#13;
         // '${name_8}' =&gt; ${retval_8}, ${name_9} =&gt; '${retval_9}'&#13;
            );&#13;
&#13;
            $$ret = i5_program_call($$prog, $$params, $$retvals) ;&#13;
&#13;
            if ($$ret === true) {&#13;
                &#13;
                 ${cursor}// ENTER YOUR CODE HERE!&#13;
            } &#13;
            &#13;
            else {&#13;
                throw new SoapFault('i5_program_service', 'Failed to call the program, use i5_errormsg() to get the failure reason');&#13;
            } &#13;
                &#13;
            if (!i5_program_close ($$prog) ) {&#13;
                 throw new SoapFault('i5_program_service', 'Failed to free program resource handle, use i5_errormsg() to get the failure reason');&#13;
            }  &#13;
        } &#13;
      &#13;
        else {&#13;
            throw new SoapFault('i5_program_service', 'Program prepare failed, use i5_errormsg() to get the failure reason');      &#13;
        }   &#13;
	}&#13;
&#13;
    function __destruct() {&#13;
    	&#13;
    	if (!i5_close($$this-&gt;conn)) {&#13;
            // Failed to disconnect from i5 server, use i5_errormsg() to get the failure reason&#13;
        }&#13;
    }&#13;
&#13;
}&#13;
&#13;
ini_set('soap.wsdl_cache_enabled', '0'); &#13;
$$server = new SoapServer('i5_program_service.wsdl');&#13;
$$server-&gt;setClass('i5_program_service');&#13;
$$server-&gt;handle();&#13;</template><template autoinsert="true" context="php" deleted="false" description="Read i5/OS spooled file" enabled="true" id="com.zend.php.ui.editor.templates.php.i5.i5Spool" name="i5Spool">/*&#13;
This template allows to get spooled file list and spooled file content&#13;
&#13;
1. Conects to i5 server&#13;
2. Creates an spool file lists, of certain output queue or for all queues &#13;
3. Gets spool file data from the queue  &#13;
4. Get the data from the spool file &#13;
5. Free spool list resourse &#13;
6. Closes connection to i5 server&#13;
&#13;
If you want to use additional connection options, remove comments in the array block&#13;
*/&#13;
&#13;
// Set connection parameters&#13;
$$connection_parameters = array(&#13;
//	I5_OPTIONS_JOBNAME 		=&gt; '${job_name}',	      // Define machine name by default&#13;
//	I5_OPTIONS_SQLNAMING 	=&gt; '${sql_naming}',	  // To use dotted (.) or slashed (/) notation in SQL requests&#13;
//	I5_OPTIONS_DECIMALPOINT =&gt; '${decimal_point}',  // To use dot or comma as decimal separator&#13;
//	I5_OPTIONS_CODEPAGEFILE =&gt; '${code_page_file}', // To use a specific code page&#13;
//	I5_OPTIONS_ALIAS		=&gt; '${alias}',		  // Enables naming a connection&#13;
//	I5_OPTIONS_INITLIBL		=&gt; '${init_libl}'		  // Specifies initial library&#13;
);&#13;
&#13;
$$conn = i5_connect('127.0.0.1', '${user__name}', '${password}', $$connection_parameters);&#13;
&#13;
if (is_resource($$conn)) {  &#13;
    $$description = array(&#13;
 // 'username' =&gt; '${user_name}',&#13;
 // 'outq'     =&gt; '${outq_name}',&#13;
 // 'userdata' =&gt; '${user_data}'&#13;
    );&#13;
    $$spool = i5_spool_list(/* $$description */); &#13;
&#13;
    if (is_resource($$spool)) { &#13;
    	&#13;
	    $$spool_file = i5_spool_list_read($$spool);&#13;
&#13;
	    if (is_array($$spool_file)) {     	    	&#13;
	    	// $$spool_file contains spool file data from the queue 	&#13;
	        ${cursor}// INSERT YOUR CODE HERE !!! OR/AND DO THE NEXT:&#13;
&#13;
	        /* string i5_spool_get_data(string jobname, integer job_number, string username, string spool_name, integer spool_id [,string filename])    &#13;
               job_name - The name of the job that created the file&#13;
               job_number - The number of the job that created the file&#13;
               username - The username of the job that created the file&#13;
               spool_name - The spool file name&#13;
               spool_id - ID of the spool file in the queue (as returned by outq_read)&#13;
               filename - IFS filename to store the data. If not provided, the data is returned as string                  &#13;
            */&#13;
            $$data = i5_spool_get_data($$spool_file['SPLFNAME'], &#13;
                                      $$spool_file['JOBNAME'], &#13;
                                      $$spool_file['USERNAME'], &#13;
                                      $$spool_file['JOBNBR'], "*LAST" );&#13;
&#13;
            if (is_string($$data)) {&#13;
            	// $$data variable contains data string from the spool file&#13;
            	// ENTER YOUR CODE HERE!&#13;
            }&#13;
            &#13;
            else {&#13;
            	// Failed to get the data from the spool file, use i5_errormsg() to to get the failure reason. Need to close the spool list and the connection to i5 server&#13;
            }      &#13;
	    } &#13;
	    &#13;
	    else {&#13;
        	// Failed to get spool file data from the queue  , need to close the spool list and the i5 connection     &#13;
        }&#13;
    } &#13;
    &#13;
    else {     &#13;
    	// Failed to create an spool file lists, use i5_errormsg() to get the failure reason and close the connection to i5 server &#13;
    }&#13;
&#13;
    if (!i5_spool_list_close($$spool)) {&#13;
        // Failed to free spool list resourse , use i5_errormsg() to get the failure reason and close the connection to i5 server&#13;
    }&#13;
    &#13;
    if (!i5_close($$conn)) {&#13;
        // Failed to disconnect from i5 server, use i5_errormsg() to get the failure reason&#13;
    }&#13;
} &#13;
&#13;
else {&#13;
	// Connection to i5 server failed, use i5_errormsg() to get the failure reason&#13;
}&#13;</template><template autoinsert="true" context="php" deleted="false" description="Create i5/OS user space" enabled="true" id="com.zend.php.ui.editor.templates.php.i5.i5UserspaceCreate" name="i5UserspaceCreate">/*&#13;
This template allows to create i5/OS user space object&#13;
&#13;
1. Conects to i5 server&#13;
2. Creates new user space object&#13;
3. Closes connection to i5 server&#13;
&#13;
If you want to use additional connection options, remove comments in the array block&#13;
*/&#13;
&#13;
// Set connection parameters&#13;
$$connection_parameters = array(&#13;
//	I5_OPTIONS_JOBNAME 		=&gt; '${job_name}',	      // Define machine name by default&#13;
//	I5_OPTIONS_SQLNAMING 	=&gt; '${sql_naming}',	  // To use dotted (.) or slashed (/) notation in SQL requests&#13;
//	I5_OPTIONS_DECIMALPOINT =&gt; '${decimal_point}',  // To use dot or comma as decimal separator&#13;
//	I5_OPTIONS_CODEPAGEFILE =&gt; '${code_page_file}', // To use a specific code page&#13;
//	I5_OPTIONS_ALIAS		=&gt; '${alias}',		  // Enables naming a connection&#13;
//	I5_OPTIONS_INITLIBL		=&gt; '${init_libl}'		  // Specifies initial library&#13;
);&#13;
&#13;
$$conn = i5_connect('127.0.0.1', '${user_name}', '${password}', $$connection_parameters);&#13;
&#13;
if (is_resource($$conn)) {&#13;
	&#13;
 /* property - &#13;
    I5_INITSIZE - The initial size of the user space being created. This value must be from 1 byte to 16, 776, 704 bytes &#13;
    I5_DESCRIPTION - user space description &#13;
    I5_INIT_VALUE - The initial value of all bytes in the user space. &#13;
    I5_EXTEND_ATTRIBUT - extended attribute. The extended attribute must be a valid *NAME. For example, an object type of *FILE has an extended attribute of PF (physical file), LF (logical file), DSPF (display file), SAVF (save file), and so on. &#13;
    I5_AUTHORITY - The authority you give users who do not have specific private or group authority to the user space &#13;
    I5_LIBNAME - Library name where the user space is located &#13;
    I5_NAME - User space name (10 char max) */&#13;
	&#13;
    $$property = array(&#13;
	            I5_INITSIZE        =&gt; '${init_size}', &#13;
				I5_DESCRIPTION     =&gt; '${description}',&#13;
				I5_INIT_VALUE      =&gt; '${init_value}',&#13;
				I5_EXTEND_ATTRIBUT =&gt; '${extend_attribut}',&#13;
				I5_AUTHORITY       =&gt; '${authority}',&#13;
				I5_LIBNAME         =&gt; '${lib_name}',&#13;
				I5_NAME            =&gt; '${name}'&#13;
	            );&#13;
	$$user_space = i5_userspace_create($$property);&#13;
    &#13;
	if ($$user_space === true) {&#13;
    	${cursor}// ENTER YOUR CODE HERE!&#13;
    }&#13;
    &#13;
    else {&#13;
        // Failed to create the user space, use i5_errormsg() to get the failure reason&#13;
    }  &#13;
    &#13;
    if (!i5_close($$conn)) {&#13;
        // Failed to disconnect from i5 server, use i5_errormsg() to get the failure reason&#13;
    }  &#13;
}&#13;
    &#13;
else {&#13;
	// Connection to i5 server failed, use i5_errormsg() to get the failure reason&#13;
}</template><template autoinsert="true" context="php" deleted="false" description="Delete i5/OS user space" enabled="true" id="com.zend.php.ui.editor.templates.php.i5.i5UserspaceDelete" name="i5UserspaceDelete">/*&#13;
This template allows to delete i5/OS user space object&#13;
&#13;
1. Conects to i5 server&#13;
2. Deletes user space object&#13;
3. Closes connection to i5 server&#13;
&#13;
If you want to use additional connection options, remove comments in the array block&#13;
*/&#13;
&#13;
// Set connection parameters&#13;
$$connection_parameters = array(&#13;
//	I5_OPTIONS_JOBNAME 		=&gt; '${job_name}',	      // Define machine name by default&#13;
//	I5_OPTIONS_SQLNAMING 	=&gt; '${sql_naming}',	  // To use dotted (.) or slashed (/) notation in SQL requests&#13;
//	I5_OPTIONS_DECIMALPOINT =&gt; '${decimal_point}',  // To use dot or comma as decimal separator&#13;
//	I5_OPTIONS_CODEPAGEFILE =&gt; '${code_page_file}', // To use a specific code page&#13;
//	I5_OPTIONS_ALIAS		=&gt; '${alias}',		  // Enables naming a connection&#13;
//	I5_OPTIONS_INITLIBL		=&gt; '${init_libl}'		  // Specifies initial library&#13;
);&#13;
&#13;
$$conn = i5_connect('127.0.0.1', '${user_name}', '${password}', $$connection_parameters);&#13;
&#13;
if (is_resource($$conn)) {&#13;
	&#13;
 /* property - &#13;
    I5_INITSIZE - The initial size of the user space being created. This value must be from 1 byte to 16, 776, 704 bytes &#13;
    I5_DESCRIPTION - user space description &#13;
    I5_INIT_VALUE - The initial value of all bytes in the user space. &#13;
    I5_EXTEND_ATTRIBUT - extended attribute. The extended attribute must be a valid *NAME. For example, an object type of *FILE has an extended attribute of PF (physical file), LF (logical file), DSPF (display file), SAVF (save file), and so on. &#13;
    I5_AUTHORITY - The authority you give users who do not have specific private or group authority to the user space &#13;
    I5_LIBNAME - Library name where the user space is located &#13;
    I5_NAME - User space name (10 char max) */&#13;
	&#13;
    $$ret = i5_command('DLTUSRSPC USRSPC(${library_name}/${userspace})');&#13;
    &#13;
	if ($$ret === true) {&#13;
    	${cursor}// ENTER YOUR CODE HERE!&#13;
    }&#13;
    &#13;
    else {&#13;
        // Failed to delete user space, use i5_errormsg() to get the failure reason&#13;
    }  &#13;
    &#13;
    if (!i5_close($$conn)) {&#13;
        // Failed to disconnect from i5 server, use i5_errormsg() to get the failure reason&#13;
    }  &#13;
}&#13;
    &#13;
else {&#13;
	// Connection to i5 server failed, use i5_errormsg() to get the failure reason&#13;
}</template><template autoinsert="true" context="php" deleted="false" description="Read i5/OS user space " enabled="true" id="com.zend.php.ui.editor.templates.php.i5.i5UserspaceGet" name="i5UserspaceGet">/*&#13;
This template allows to read i5/OS user space &#13;
&#13;
1. Conects to i5 server&#13;
2. Opens a user space and prepares it to be run&#13;
3. Retrieves user space data&#13;
4. Closes connection to i5 server&#13;
&#13;
If you want to use additional connection options, remove comments in the array block&#13;
*/&#13;
&#13;
// Set connection parameters&#13;
$$connection_parameters = array(&#13;
//	I5_OPTIONS_JOBNAME 		=&gt; '${job_name}',	      // Define machine name by default&#13;
//	I5_OPTIONS_SQLNAMING 	=&gt; '${sql_naming}',	  // To use dotted (.) or slashed (/) notation in SQL requests&#13;
//	I5_OPTIONS_DECIMALPOINT =&gt; '${decimal_point}',  // To use dot or comma as decimal separator&#13;
//	I5_OPTIONS_CODEPAGEFILE =&gt; '${code_page_file}', // To use a specific code page&#13;
//	I5_OPTIONS_ALIAS		=&gt; '${alias}',		  // Enables naming a connection&#13;
//	I5_OPTIONS_INITLIBL		=&gt; '${init_libl}'	  // Specifies initial library&#13;
);&#13;
&#13;
$$conn = i5_connect('127.0.0.1', '${user_name}', '${password}', $$connection_parameters);&#13;
&#13;
if (is_resource($$conn)) {&#13;
	$$description = Array(&#13;
    array('Name' =&gt;' ${name_0}', 'IO' =&gt; I5_INOUT, 'Type' =&gt; I5_TYPE_CHAR, 'Length' =&gt; '${len_0}'),&#13;
    array('Name' =&gt; '${name_1}', 'IO' =&gt; I5_INOUT, 'Type' =&gt; I5_TYPE_CHAR, 'Length' =&gt; '${len_1}'),&#13;
 // array('Name' =&gt; '${name_2}', 'IO' =&gt; I5_INOUT, 'Type' =&gt; I5_TYPE_CHAR, 'Length' =&gt; '${len_2}'),&#13;
 // array('Name' =&gt; '${name_3}', 'IO' =&gt; I5_INOUT, 'Type' =&gt; I5_TYPE_CHAR, 'Length' =&gt; '${len_3}'),&#13;
 // array('Name' =&gt; '${name_4}', 'IO' =&gt; I5_INOUT, 'Type' =&gt; I5_TYPE_CHAR, 'Length' =&gt; '${len_4}')&#13;
	);&#13;
                &#13;
    $$uspc = i5_userspace_prepare('${library_name}/${userspace}', $$description);&#13;
    &#13;
	if ($$uspc === true) {&#13;
		$$parmOut = array(&#13;
		           '${name_0}' =&gt; '${parm_0}', &#13;
		           '${name_1}' =&gt; '${parm_1}',&#13;
                // '${name_2}' =&gt; '${parm_2}',&#13;
                // '${name_3}' =&gt; '${parm_3}',&#13;
                // '${name_4}' =&gt; '${parm_4}'&#13;
                   );&#13;
		$$ret = i5_userspace_get($$uspc, $$parmOut); &#13;
		&#13;
		if ($$ret === true) {&#13;
    	   ${cursor} // ENTER YOUR CODE HERE!&#13;
		}&#13;
&#13;
        else {&#13;
    	    // Failed to retrieve user space data, use i5_errormsg() to get the failure reason&#13;
        }&#13;
    &#13;
        if (!i5_close($$conn)) {&#13;
            // Failed to disconnect from i5 server, use i5_errormsg() to get the failure reason&#13;
        }  &#13;
	}&#13;
	else {&#13;
		// Failed to open the user space, use i5_errormsg() to get the failure reason&#13;
	}&#13;
}&#13;
    &#13;
else {&#13;
	// Connection to i5 server failed, use i5_errormsg() to get the failure reason&#13;
}</template><template autoinsert="true" context="php" deleted="false" description="Write i5/OS user space" enabled="true" id="com.zend.php.ui.editor.templates.php.i5.i5UserspacePut" name="i5UserspacePut">/*&#13;
This template allows to write i5/OS user space&#13;
&#13;
1. Conects to i5 server&#13;
2. Opens a user space and prepares it to be run&#13;
3. Adds user space data&#13;
4. Closes connection to i5 server&#13;
&#13;
If you want to use additional connection options, remove comments in the  array block&#13;
*/&#13;
&#13;
// Set connection parameters&#13;
$$connection_parameters = array(&#13;
//	I5_OPTIONS_JOBNAME 			=&gt; '${job_name}',	       // Define machine name by default&#13;
//	I5_OPTIONS_SQLNAMING 		=&gt; '${sql_naming}',	 	   // To use dotted (.) or slashed (/) notation in SQL requests&#13;
//	I5_OPTIONS_DECIMALPOINT =&gt; '${decimal_point}',    // To use dot or comma as decimal separator&#13;
//	I5_OPTIONS_CODEPAGEFILE =&gt; '${code_page_file}', // To use a specific code page&#13;
//	I5_OPTIONS_ALIAS				=&gt; '${alias}',			   	   // Enables naming a connection&#13;
//	I5_OPTIONS_INITLIBL			=&gt; '${init_libl}'				   // Specifies initial library&#13;
);&#13;
&#13;
$$conn = i5_connect('127.0.0.1', '${user_name}', '${password}', $$connection_parameters);&#13;
&#13;
if (is_resource($$conn)) {&#13;
	$$description = Array(&#13;
    array('Name' =&gt; '${name_0}', 'IO' =&gt; I5_INOUT, 'Type' =&gt; I5_TYPE_CHAR, 'Length' =&gt; '${len_0}'),&#13;
    array('Name' =&gt; '${name_1}', 'IO' =&gt; I5_INOUT, 'Type' =&gt; I5_TYPE_CHAR, 'Length' =&gt; '${len_1}'),&#13;
 // array('Name' =&gt; '${name_2}', 'IO' =&gt; I5_INOUT, 'Type' =&gt; I5_TYPE_CHAR, 'Length' =&gt; '${len_2}'),&#13;
 // array('Name' =&gt; '${name_3}', 'IO' =&gt; I5_INOUT, 'Type' =&gt; I5_TYPE_CHAR, 'Length' =&gt; '${len_3}'),&#13;
 // array('Name' =&gt; '${name_4}', 'IO' =&gt; I5_INOUT, 'Type' =&gt; I5_TYPE_CHAR, 'Length' =&gt; '${len_4}')&#13;
	);&#13;
                &#13;
    $$uspc = i5_userspace_prepare('${library_name}/${userspace}', $$description);&#13;
    &#13;
	if ($$uspc === true) {&#13;
		$$parmOut = array(&#13;
		'${name_0}' =&gt; '${data_0}', &#13;
		'${name_1}' =&gt; '${data_1}',&#13;
     // '${name_2}' =&gt; '${data_2}',&#13;
     // '${name_3}' =&gt; '${data_3}',&#13;
     // '${name_4}' =&gt; '${data_4}'&#13;
        );&#13;
		$$ret = i5_userspace_put($$uspc, $$parameter); &#13;
		&#13;
		if ($$ret === true) {&#13;
    	    ${cursor} // ENTER YOUR CODE HERE!&#13;
		}&#13;
&#13;
        else {&#13;
    	    // Failed to retrieve user space data, use i5_errormsg() to get the failure reason&#13;
        }&#13;
    &#13;
        if (!i5_close($$conn)) {&#13;
            // Failed to disconnect from i5 server, use i5_errormsg() to get the failure reason&#13;
        }  &#13;
	}&#13;
	else {&#13;
		// Failed to open the user space, use i5_errormsg() to get the failure reason&#13;
	}&#13;
}&#13;
    &#13;
else {&#13;
	// Connection to i5 server failed, use i5_errormsg() to get the failure reason&#13;
}</template><template autoinsert="false" context="php" deleted="false" description="if statement" enabled="true" id="org.eclipse.php.ui.editor.templates.php.if" name="if">if (${condition}) {
	${cursor};
}
</template><template autoinsert="false" context="php" deleted="false" description="instanceof statement" enabled="true" id="org.eclipse.php.ui.editor.templates.php.instanceof" name="inst">if (${dollar}${variable} instanceof ${class}) {
	${cursor};
}
</template><template autoinsert="false" context="php" deleted="false" description="iterates a directory" enabled="true" id="org.eclipse.php.ui.editor.templates.php.itdir" name="itdir">${dollar}${dirh} = opendir(${dirname});
if (${dollar}${dirh}) {
	while (${dollar}${dir_element} = readdir(${dollar}${dirh})) {
		${cursor};
	}
	unset(${dollar}${dir_element});
	closedir(${dollar}${dirh});
}
</template><template autoinsert="false" context="php" deleted="false" description="iterates an array" enabled="true" id="org.eclipse.php.ui.editor.templates.php.arrayIterator" name="iter">for (${dollar}${number_variable} = 0 ; ${dollar}${number_variable} &lt; count(${dollar}${array_variable}) ; ${dollar}${number_variable}++) {
	${cursor};
}
</template><template autoinsert="false" context="php" deleted="false" description="lambda function statement (closure)" enabled="true" id="org.eclipse.php.ui.editor.templates.php.lambda" name="lambda">function (${parameters}) use (${lexical_variables}) {
	${cursor};
}
</template><template autoinsert="false" context="php" deleted="false" description="mysql_fetch_array() loop" enabled="true" id="org.eclipse.php.ui.editor.templates.php.mySql.fa" name="my_fa">while (${dollar}${row} = mysql_fetch_array(${dollar}${query})) {
	${cursor};
}
</template><template autoinsert="false" context="php" deleted="false" description="mysql_fetch_object() loop" enabled="true" id="org.eclipse.php.ui.editor.templates.php.mySql.fo" name="my_fo">while (${dollar}${row} = mysql_fetch_object(${dollar}${query})) {
	${cursor};
}
</template><template autoinsert="false" context="php" deleted="false" description="mysql_fetch_row() loop" enabled="true" id="org.eclipse.php.ui.editor.templates.php.mySql.fr" name="my_fr">while (${dollar}${row} = mysql_fetch_row(${dollar}${query})) {
	${cursor};
}
</template><template autoinsert="false" context="php" deleted="false" description="Trap code output" enabled="true" id="org.eclipse.php.ui.editor.templates.php.my_gc" name="my_gc">ob_start();
	
${cursor};

${dollar}${contents} = ob_get_contents();
ob_end_clean();
</template><template autoinsert="false" context="php" deleted="false" description="namespace statement" enabled="true" id="org.eclipse.php.ui.editor.templates.php.ns" name="ns">namespace ${name};</template><template autoinsert="false" context="php" deleted="false" description="Call parent's clone" enabled="true" id="org.eclipse.php.ui.editor.templates.php.pclon" name="pclon">parent::__clone();
</template><template autoinsert="false" context="php" deleted="false" description="Call parent constructor" enabled="true" id="org.eclipse.php.ui.editor.templates.php.pcon" name="pcon">parent::__construct();
${cursor}</template><template autoinsert="false" context="php" deleted="false" description="print an expression" enabled="true" id="org.eclipse.php.ui.editor.templates.php.print" name="pr">print ${};
${cursor}</template><template autoinsert="false" context="php" deleted="false" description="prints the current class name" enabled="true" id="org.eclipse.php.ui.editor.templates.php.print.className" name="prc">print("${class_container}");
${cursor}</template><template autoinsert="false" context="php" deleted="false" description="prints the current function name" enabled="true" id="org.eclipse.php.ui.editor.templates.php.print.functionName" name="prf">print("${function_container}");
${cursor}</template><template autoinsert="false" context="php" deleted="false" description="print with new line" enabled="true" id="org.eclipse.php.ui.editor.templates.php.print.newline" name="prln">print ${}."\n";
${cursor}</template><template autoinsert="false" context="php" deleted="false" description="print a string" enabled="true" id="org.eclipse.php.ui.editor.templates.php.print.string" name="prs">print "${}";
${cursor}</template><template autoinsert="false" context="php" deleted="false" description="print a value" enabled="true" id="org.eclipse.php.ui.editor.templates.php.print.variable" name="prv">print("\${dollar}${variable} = ". ${dollar}${variable});
${cursor}</template><template autoinsert="true" context="php" deleted="false" description="Setter Body" enabled="true" id="org.eclipse.php.ui.editor.templates.php.codetemplates.setterbody" name="setterbody">${field} = ${param};</template><template autoinsert="true" context="php" deleted="false" description="" enabled="true" name="st">$$sqlTxt = "${SQL}";</template><template autoinsert="true" context="php" deleted="false" description="" enabled="true" name="sts">$$sqlTxt = "${SELECT }";</template><template autoinsert="false" context="php" deleted="false" description="switch statement" enabled="true" id="org.eclipse.php.ui.editor.templates.php.switch" name="swi">switch (${dollar}${variable}) {
	case ${value}:
	${cursor};
	break;
	
	default:
		;
	break;
}
</template><template autoinsert="true" context="php" deleted="false" description="" enabled="true" name="test">echo "test";&#13;
die;</template><template autoinsert="false" context="php" deleted="false" description="try catch block" enabled="true" id="org.eclipse.php.ui.editor.templates.php.try" name="try">try {
	${cursor}
} catch (${Exception} ${dollar}e) {
}
</template><template autoinsert="false" context="php" deleted="false" description="use statement" enabled="true" id="org.eclipse.php.ui.editor.templates.php.use" name="use">use ${namespace} as ${alias};</template><template autoinsert="true" context="php" deleted="false" description="" enabled="true" name="vd">var_dump(${string_name});&#13;
die;</template><template autoinsert="false" context="php" deleted="false" description="while loop" enabled="true" id="org.eclipse.php.ui.editor.templates.php.while" name="while">while (${condition}) {
	${cursor};
}
</template></templates>